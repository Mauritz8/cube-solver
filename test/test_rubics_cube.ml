open Rubics_cube.Cube

(* Scramble: D2 R2 D' L2 U L R2 U' D R' D' R B R' F D F' R B' U F2 B U2 F2 L *)
(* White on top and green on the front *)
(* Generated by https://ruwix.com/puzzle-scramble-generator/?type=rubiks-cube *)
let cube =
  {
    front = [ RED; BLUE; RED; YELLOW; GREEN; ORANGE; WHITE; BLUE; YELLOW; ];
    back = [ BLUE; BLUE; WHITE; ORANGE; BLUE; RED; ORANGE; RED; WHITE; ];
    right = [ GREEN; ORANGE; BLUE; YELLOW; RED; YELLOW;  ORANGE; RED; BLUE; ];
    left = [ GREEN; YELLOW; BLUE; WHITE; ORANGE; GREEN; ORANGE; GREEN; GREEN; ];
    top = [ WHITE; GREEN; RED; BLUE; WHITE; GREEN; YELLOW; ORANGE; YELLOW; ];
    bottom = [ RED; RED; GREEN; WHITE; YELLOW; WHITE; YELLOW; WHITE; ORANGE; ];
  }

let move_right_clockwise_test () =
  let expect = 
    {
      front = [ RED; BLUE; GREEN; YELLOW; GREEN; WHITE; WHITE; BLUE; ORANGE; ];
      back = [ BLUE; BLUE; RED; ORANGE; BLUE; GREEN; ORANGE; RED; YELLOW; ];
      right = [ ORANGE; YELLOW; GREEN; RED; RED; ORANGE; BLUE; YELLOW; BLUE; ];
      left = [ GREEN; YELLOW; BLUE; WHITE; ORANGE; GREEN; ORANGE; GREEN; GREEN; ];
      top = [ WHITE; GREEN; RED; BLUE; WHITE; ORANGE; YELLOW; ORANGE; YELLOW; ];
      bottom = [ RED; RED; WHITE; WHITE; YELLOW; RED; YELLOW; WHITE; WHITE; ];
    }
  in
  let actual = (move cube RIGHT true) in
  Alcotest.(check string) "same front" (side_to_string expect.front) (side_to_string actual.front);
  Alcotest.(check string) "same back" (side_to_string expect.back) (side_to_string actual.back);
  Alcotest.(check string) "same right" (side_to_string expect.right) (side_to_string actual.right);
  Alcotest.(check string) "same left" (side_to_string expect.left) (side_to_string actual.left);
  Alcotest.(check string) "same top" (side_to_string expect.top) (side_to_string actual.top);
  Alcotest.(check string) "same bottom" (side_to_string expect.bottom) (side_to_string actual.bottom)


(* Run it *)
let () =
  let open Alcotest in
  run "Cube" [
      "moves", [
          test_case "Move right clockwise" `Quick move_right_clockwise_test;
        ];
    ]
