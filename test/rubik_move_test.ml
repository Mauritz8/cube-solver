open Rubik.Cube
open Rubik.Move

let cube_testable =
  let equal cube1 cube2 = cube1 = cube2 in
  Alcotest.testable Utils.cube_pretty_printer equal


(* Scramble: D2 R2 D' L2 U L R2 U' D R' D' R B R' F D F' R B' U F2 B U2 F2 L *)
(* White on top and green on the front *)
(* Generated by https://ruwix.com/puzzle-scramble-generator/?type=rubiks-cube *)
let cube =
  {
    top_face = {
      fst = { fst = WHITE; snd = GREEN; trd = RED; };
      snd = { fst = BLUE; snd = WHITE; trd = GREEN; };
      trd = { fst = YELLOW; snd = ORANGE; trd = YELLOW; };
    };
    top_layer = {
      front = { fst = RED; snd = BLUE; trd = RED; };
      right = { fst = GREEN; snd = ORANGE; trd = BLUE; };
      back = { fst = WHITE; snd = RED; trd = ORANGE; };
      left = { fst = GREEN; snd = YELLOW; trd = BLUE; };
    };
    middle_layer = {
      front = { fst = YELLOW; snd = GREEN; trd = ORANGE; };
      right = { fst = YELLOW; snd = RED; trd = YELLOW; };
      back = { fst = RED; snd = BLUE; trd = ORANGE; };
      left = { fst = WHITE; snd = ORANGE; trd = GREEN; };
    };
    bottom_layer = {
      front = { fst = WHITE; snd = BLUE; trd = YELLOW; };
      right = { fst = ORANGE; snd = RED; trd = BLUE; };
      back = { fst = WHITE; snd = BLUE; trd = BLUE; };
      left = { fst = ORANGE; snd = GREEN; trd = GREEN; };
    };
    bottom_face = {
      fst = { fst = RED; snd = RED; trd = GREEN; };
      snd = { fst = WHITE; snd = YELLOW; trd = WHITE; };
      trd = { fst = YELLOW; snd = WHITE; trd = ORANGE; };
    };
  }

let move_top_clockwise_test () =
  let expect =
    { cube with
      top_face = {
        fst = { fst = YELLOW; snd = BLUE; trd = WHITE; };
        snd = { fst = ORANGE; snd = WHITE; trd = GREEN; };
        trd = { fst = YELLOW; snd = GREEN; trd = RED; };
      };
      top_layer = {
        left = { fst = RED; snd = BLUE; trd = RED; };
        front = { fst = GREEN; snd = ORANGE; trd = BLUE; };
        right = { fst = WHITE; snd = RED; trd = ORANGE; };
        back = { fst = GREEN; snd = YELLOW; trd = BLUE; };
      };
    }
  in
  let actual = make_move cube { layer = TOP; clockwise = true } in

  Alcotest.(check cube_testable)
    "expected cube"
    expect
    actual

let move_top_counter_clockwise_test () =
  let expect =
    { cube with
      top_face = {
        fst = { fst = RED; snd = GREEN; trd = YELLOW; };
        snd = { fst = GREEN; snd = WHITE; trd = ORANGE; };
        trd = { fst = WHITE; snd = BLUE; trd = YELLOW; };
      };
      top_layer = {
        right = { fst = RED; snd = BLUE; trd = RED; };
        back = { fst = GREEN; snd = ORANGE; trd = BLUE; };
        left = { fst = WHITE; snd = RED; trd = ORANGE; };
        front = { fst = GREEN; snd = YELLOW; trd = BLUE; };
      };
    }
  in
  let actual = make_move cube { layer = TOP; clockwise = false } in

  Alcotest.(check cube_testable)
    "expected cube"
    expect
    actual


let move_bottom_clockwise_test () =
  let expect =
    { cube with
      bottom_face = {
        fst = { fst = YELLOW; snd = WHITE; trd = RED; };
        snd = { fst = WHITE; snd = YELLOW; trd = RED; };
        trd = { fst = ORANGE; snd = WHITE; trd = GREEN; };
      };
      bottom_layer = {
        right = { fst = WHITE; snd = BLUE; trd = YELLOW; };
        back = { fst = ORANGE; snd = RED; trd = BLUE; };
        left = { fst = WHITE; snd = BLUE; trd = BLUE; };
        front = { fst = ORANGE; snd = GREEN; trd = GREEN; };
      };
    }
  in
  let actual = make_move cube { layer = BOTTOM; clockwise = true } in

  Alcotest.(check cube_testable)
    "expected cube"
    expect
    actual

let move_bottom_counter_clockwise_test () =
  let expect =
    { cube with
      bottom_face = {
        fst = { fst = GREEN; snd = WHITE; trd = ORANGE; };
        snd = { fst = RED; snd = YELLOW; trd = WHITE; };
        trd = { fst = RED; snd = WHITE; trd = YELLOW; };
      };
      bottom_layer = {
        left = { fst = WHITE; snd = BLUE; trd = YELLOW; };
        front = { fst = ORANGE; snd = RED; trd = BLUE; };
        right = { fst = WHITE; snd = BLUE; trd = BLUE; };
        back = { fst = ORANGE; snd = GREEN; trd = GREEN; };
      };
    }
  in
  let actual = make_move cube { layer = BOTTOM; clockwise = false } in

  Alcotest.(check cube_testable)
    "expected cube"
    expect
    actual

let move_right_clockwise_test () =
  let expect =
    {
      top_face = {
        fst = { cube.top_face.fst with trd = RED; };
        snd = { cube.top_face.snd with trd = ORANGE; };
        trd = { cube.top_face.trd with trd = YELLOW; };
      };
      top_layer = { cube.top_layer with
        front = { cube.top_layer.front with trd = GREEN; };
        right = { fst = ORANGE; snd = YELLOW; trd = GREEN; };
        back = { cube.top_layer.back with fst = YELLOW; };
      };
      middle_layer = { cube.middle_layer with
        front = { cube.middle_layer.front with trd = WHITE; };
        right = { fst = RED; snd = RED; trd = ORANGE; };
        back = { cube.middle_layer.back with fst = GREEN; };
      };
      bottom_layer = { cube.bottom_layer with
        front = { cube.bottom_layer.front with trd = ORANGE; };
        right = { fst = BLUE; snd = YELLOW; trd = BLUE; };
        back = { cube.bottom_layer.back with fst = RED; };
      };
      bottom_face = {
        fst = { cube.bottom_face.fst with trd = WHITE; };
        snd = { cube.bottom_face.snd with trd = RED; };
        trd = { cube.bottom_face.trd with trd = WHITE; };
      };
    }
  in
  let actual = make_move cube { layer = RIGHT; clockwise = true } in

  Alcotest.(check cube_testable)
    "expected cube"
    expect
    actual

let move_right_counter_clockwise_test () =
  let expect =
    {
      top_face = {
        fst = { cube.top_face.fst with trd = WHITE; };
        snd = { cube.top_face.snd with trd = RED; };
        trd = { cube.top_face.trd with trd = WHITE; };
      };
      top_layer = { cube.top_layer with
        front = { cube.top_layer.front with trd = RED; };
        right = { fst = BLUE; snd = YELLOW; trd = BLUE; };
        back = { cube.top_layer.back with fst = ORANGE; };
      };
      middle_layer = { cube.middle_layer with
        front = { cube.middle_layer.front with trd = GREEN; };
        right = { fst = ORANGE; snd = RED; trd = RED; };
        back = { cube.middle_layer.back with fst = WHITE; };
      };
      bottom_layer = { cube.bottom_layer with
        front = { cube.bottom_layer.front with trd = YELLOW; };
        right = { fst = GREEN; snd = YELLOW; trd = ORANGE; };
        back = { cube.bottom_layer.back with fst = GREEN; };
      };
      bottom_face = {
        fst = { cube.bottom_face.fst with trd = RED; };
        snd = { cube.bottom_face.snd with trd = ORANGE; };
        trd = { cube.bottom_face.trd with trd = YELLOW; };
      };
    }
  in
  let actual = make_move cube { layer = RIGHT; clockwise = false } in

  Alcotest.(check cube_testable)
    "expected cube"
    expect
    actual

let move_left_clockwise_test () =
  let expect =
    {
      top_face = {
        fst = { cube.top_face.fst with fst = BLUE; };
        snd = { cube.top_face.snd with fst = ORANGE; };
        trd = { cube.top_face.trd with fst = ORANGE; };
      };
      top_layer = { cube.top_layer with
        front = { cube.top_layer.front with fst = WHITE; };
        left = { fst = ORANGE; snd = WHITE; trd = GREEN; };
        back = { cube.top_layer.back with trd = YELLOW; };
      };
      middle_layer = { cube.middle_layer with
        front = { cube.middle_layer.front with fst = BLUE; };
        left = { fst = GREEN; snd = ORANGE; trd = YELLOW; };
        back = { cube.middle_layer.back with trd = WHITE; };
      };
      bottom_layer = { cube.bottom_layer with
        front = { cube.bottom_layer.front with fst = YELLOW; };
        left = { fst = GREEN; snd = GREEN; trd = BLUE; };
        back = { cube.bottom_layer.back with trd = RED; };
      };
      bottom_face = {
        fst = { cube.bottom_face.fst with fst = RED; };
        snd = { cube.bottom_face.snd with fst = YELLOW; };
        trd = { cube.bottom_face.trd with fst = WHITE; };
      };
    }
  in
  let actual = make_move cube { layer = LEFT; clockwise = true } in

  Alcotest.(check cube_testable)
    "expected cube"
    expect
    actual

let move_left_counter_clockwise_test () =
  let expect =
    {
      top_face = {
        fst = { cube.top_face.fst with fst = RED; };
        snd = { cube.top_face.snd with fst = YELLOW; };
        trd = { cube.top_face.trd with fst = WHITE; };
      };
      top_layer = { cube.top_layer with
        front = { cube.top_layer.front with fst = RED; };
        left = { fst = BLUE; snd = GREEN; trd = GREEN; };
        back = { cube.top_layer.back with trd = YELLOW; };
      };
      middle_layer = { cube.middle_layer with
        front = { cube.middle_layer.front with fst = WHITE; };
        left = { fst = YELLOW; snd = ORANGE; trd = GREEN; };
        back = { cube.middle_layer.back with trd = BLUE; };
      };
      bottom_layer = { cube.bottom_layer with
        front = { cube.bottom_layer.front with fst = YELLOW; };
        left = { fst = GREEN; snd = WHITE; trd = ORANGE; };
        back = { cube.bottom_layer.back with trd = WHITE; };
      };
      bottom_face = {
        fst = { cube.bottom_face.fst with fst = BLUE; };
        snd = { cube.bottom_face.snd with fst = ORANGE; };
        trd = { cube.bottom_face.trd with fst = ORANGE; };
      };
    }
  in
  let actual = make_move cube { layer = LEFT; clockwise = false } in

  Alcotest.(check cube_testable)
    "expected cube"
    expect
    actual

let move_front_clockwise_test () =
  let expect =
    {
      top_face = { cube.top_face with
        trd = { fst = GREEN; snd = GREEN; trd = BLUE; };
      };
      top_layer = { cube.top_layer with
        front = { fst = WHITE; snd = YELLOW; trd = RED; };
        left = { cube.top_layer.left with trd = RED; };
        right = { cube.top_layer.right with fst = YELLOW; };
      };
      middle_layer = { cube.middle_layer with
        front = { fst = BLUE; snd = GREEN; trd = BLUE; };
        left = { cube.middle_layer.left with trd = RED; };
        right = { cube.middle_layer.right with fst = ORANGE; };
      };
      bottom_layer = { cube.bottom_layer with
        front = { fst = YELLOW; snd = ORANGE; trd = RED; };
        left = { cube.bottom_layer.left with trd = GREEN; };
        right = { cube.bottom_layer.right with fst = YELLOW; };
      };
      bottom_face = { cube.bottom_face with
        fst = { fst = ORANGE; snd = YELLOW; trd = GREEN; };
      };
    }
  in
  let actual = make_move cube { layer = FRONT; clockwise = true } in

  Alcotest.(check cube_testable)
    "expected cube"
    expect
    actual

let move_front_counter_clockwise_test () =
  let expect =
    {
      top_face = { cube.top_face with
        trd = { fst = GREEN; snd = YELLOW; trd = ORANGE; };
      };
      top_layer = { cube.top_layer with
        front = { fst = RED; snd = ORANGE; trd = YELLOW; };
        left = { cube.top_layer.left with trd = YELLOW; };
        right = { cube.top_layer.right with fst = GREEN; };
      };
      middle_layer = { cube.middle_layer with
        front = { fst = BLUE; snd = GREEN; trd = BLUE; };
        left = { cube.middle_layer.left with trd = ORANGE; };
        right = { cube.middle_layer.right with fst = RED; };
      };
      bottom_layer = { cube.bottom_layer with
        front = { fst = RED; snd = YELLOW; trd = WHITE; };
        left = { cube.bottom_layer.left with trd = YELLOW; };
        right = { cube.bottom_layer.right with fst = RED; };
      };
      bottom_face = { cube.bottom_face with
        fst = { fst = BLUE; snd = GREEN; trd = GREEN; };
      };
    }
  in
  let actual = make_move cube { layer = FRONT; clockwise = false } in

  Alcotest.(check cube_testable)
    "expected cube"
    expect
    actual

let move_back_clockwise_test () =
  let expect =
    {
      top_face = { cube.top_face with
        fst = { fst = BLUE; snd = YELLOW; trd = BLUE; };
      };
      top_layer = { cube.top_layer with
        back = { fst = WHITE; snd = RED; trd = WHITE; };
        left = { cube.top_layer.left with fst = RED; };
        right = { cube.top_layer.right with trd = ORANGE; };
      };
      middle_layer = { cube.middle_layer with
        back = { fst = BLUE; snd = BLUE; trd = RED; };
        left = { cube.middle_layer.left with fst = GREEN; };
        right = { cube.middle_layer.right with trd = WHITE; };
      };
      bottom_layer = { cube.bottom_layer with
        back = { fst = BLUE; snd = ORANGE; trd = ORANGE; };
        left = { cube.bottom_layer.left with fst = WHITE; };
        right = { cube.bottom_layer.right with trd = YELLOW; };
      };
      bottom_face = { cube.bottom_face with
        trd = { fst = GREEN; snd = WHITE; trd = ORANGE; };
      };
    }
  in
  let actual = make_move cube { layer = BACK; clockwise = true } in

  Alcotest.(check cube_testable)
    "expected cube"
    expect
    actual

let move_back_counter_clockwise_test () =
  let expect =
    {
      top_face = { cube.top_face with
        fst = { fst = ORANGE; snd = WHITE; trd = GREEN; };
      };
      top_layer = { cube.top_layer with
        back = { fst = ORANGE; snd = ORANGE; trd = BLUE; };
        left = { cube.top_layer.left with fst = YELLOW; };
        right = { cube.top_layer.right with trd = WHITE; };
      };
      middle_layer = { cube.middle_layer with
        back = { fst = RED; snd = BLUE; trd = BLUE; };
        left = { cube.middle_layer.left with fst = WHITE; };
        right = { cube.middle_layer.right with trd = GREEN; };
      };
      bottom_layer = { cube.bottom_layer with
        back = { fst = WHITE; snd = RED; trd = WHITE; };
        left = { cube.bottom_layer.left with fst = ORANGE; };
        right = { cube.bottom_layer.right with trd = RED; };
      };
      bottom_face = { cube.bottom_face with
        trd = { fst = BLUE; snd = YELLOW; trd = BLUE; };
      };
    }
  in
  let actual = make_move cube { layer = BACK; clockwise = false } in

  Alcotest.(check cube_testable)
    "expected cube"
    expect
    actual

let () =
  let open Alcotest in
  run "Cube"
    [
      ( "moves",
        [
          test_case "Move top clockwise" `Quick move_top_clockwise_test;
          test_case "Move top counter clockwise" `Quick
            move_top_counter_clockwise_test;
          test_case "Move bottom clockwise" `Quick move_bottom_clockwise_test;
          test_case "Move bottom counter clockwise" `Quick
            move_bottom_counter_clockwise_test;
          test_case "Move right clockwise" `Quick move_right_clockwise_test;
          test_case "Move right counter clockwise" `Quick
            move_right_counter_clockwise_test;
          test_case "Move left clockwise" `Quick move_left_clockwise_test;
          test_case "Move left counter clockwise" `Quick
            move_left_counter_clockwise_test;
          test_case "Move front clockwise" `Quick move_front_clockwise_test;
          test_case "Move front counter clockwise" `Quick
            move_front_counter_clockwise_test;
          test_case "Move back clockwise" `Quick move_back_clockwise_test;
          test_case "Move back counter clockwise" `Quick
            move_back_counter_clockwise_test;
        ] );
    ]
