open Rubik.Cube
open Rubik.Solve

(* All scrambles are generated by
   https://ruwix.com/puzzle-scramble-generator/?type=rubiks-cube *)
(* White on top and green on the front *)

let cube_cross_solved_testable =
  let cross_solved cube1 cube2 =
    cube1.top_face.fst.snd == cube2.top_face.fst.snd
    && cube1.top_face.snd.fst == cube2.top_face.snd.fst
    && cube1.top_face.snd.snd == cube2.top_face.snd.snd
    && cube1.top_face.snd.trd == cube2.top_face.snd.trd
    && cube1.top_face.trd.snd == cube2.top_face.trd.snd
    && cube1.top_layer.front.snd == cube2.top_layer.front.snd
    && cube1.top_layer.left.snd == cube2.top_layer.left.snd
    && cube1.top_layer.right.snd == cube2.top_layer.right.snd
    && cube1.top_layer.back.snd == cube2.top_layer.back.snd
  in
  Alcotest.testable Utils.cube_pretty_printer cross_solved

let cube_with_cross_solved =
  {
    top_face =
      {
        fst = { fst = YELLOW; snd = WHITE; trd = YELLOW };
        snd = { fst = WHITE; snd = WHITE; trd = WHITE };
        trd = { fst = YELLOW; snd = WHITE; trd = YELLOW };
      };
    top_layer =
      {
        front = { fst = YELLOW; snd = GREEN; trd = YELLOW };
        right = { fst = YELLOW; snd = RED; trd = YELLOW };
        back = { fst = YELLOW; snd = BLUE; trd = YELLOW };
        left = { fst = YELLOW; snd = ORANGE; trd = YELLOW };
      };
    middle_layer =
      {
        front = { fst = YELLOW; snd = GREEN; trd = YELLOW };
        right = { fst = YELLOW; snd = RED; trd = YELLOW };
        back = { fst = YELLOW; snd = BLUE; trd = YELLOW };
        left = { fst = YELLOW; snd = ORANGE; trd = YELLOW };
      };
    bottom_layer =
      {
        front = { fst = YELLOW; snd = YELLOW; trd = YELLOW };
        right = { fst = YELLOW; snd = YELLOW; trd = YELLOW };
        back = { fst = YELLOW; snd = YELLOW; trd = YELLOW };
        left = { fst = YELLOW; snd = YELLOW; trd = YELLOW };
      };
    bottom_face =
      {
        fst = { fst = YELLOW; snd = YELLOW; trd = YELLOW };
        snd = { fst = YELLOW; snd = YELLOW; trd = YELLOW };
        trd = { fst = YELLOW; snd = YELLOW; trd = YELLOW };
      };
  }

(* TODO: make more tests, for example:
     1. cross is already solved
     2. only one edge is not solved
     
     tests for multiple different scrambles to really make sure it works
     3. solve all four edges #1
     4. solve all four edges #2
     5. solve all four edges #3
 *)

(* Scramble: D2 R2 D' L2 U L R2 U' D R' D' R B R' F D F' R B' U F2 B U2 F2 L *)
let solve_cross_test_1 () =
  let cube =
    {
      top_face =
        {
          fst = { fst = WHITE; snd = GREEN; trd = RED };
          snd = { fst = BLUE; snd = WHITE; trd = GREEN };
          trd = { fst = YELLOW; snd = ORANGE; trd = YELLOW };
        };
      top_layer =
        {
          front = { fst = RED; snd = BLUE; trd = RED };
          right = { fst = GREEN; snd = ORANGE; trd = BLUE };
          back = { fst = WHITE; snd = RED; trd = ORANGE };
          left = { fst = GREEN; snd = YELLOW; trd = BLUE };
        };
      middle_layer =
        {
          front = { fst = YELLOW; snd = GREEN; trd = ORANGE };
          right = { fst = YELLOW; snd = RED; trd = YELLOW };
          back = { fst = RED; snd = BLUE; trd = ORANGE };
          left = { fst = WHITE; snd = ORANGE; trd = GREEN };
        };
      bottom_layer =
        {
          front = { fst = WHITE; snd = BLUE; trd = YELLOW };
          right = { fst = ORANGE; snd = RED; trd = BLUE };
          back = { fst = WHITE; snd = BLUE; trd = BLUE };
          left = { fst = ORANGE; snd = GREEN; trd = GREEN };
        };
      bottom_face =
        {
          fst = { fst = RED; snd = RED; trd = GREEN };
          snd = { fst = WHITE; snd = YELLOW; trd = WHITE };
          trd = { fst = YELLOW; snd = WHITE; trd = ORANGE };
        };
    }
  in
  let solution = solve_cross cube in
  Alcotest.(check cube_cross_solved_testable)
    "cross solved" cube_with_cross_solved solution.cube

(* Scramble: D2 B2 F' D' L' B U F B' L' F2 L2 F2 D L2 U2 B2 U' R2 L F' R' B F2 U *)
let solve_cross_test_2 () =
  let cube =
    {
      top_face =
        {
          fst = { fst = WHITE; snd = WHITE; trd = BLUE };
          snd = { fst = BLUE; snd = WHITE; trd = GREEN };
          trd = { fst = BLUE; snd = RED; trd = GREEN };
        };
      top_layer =
        {
          front = { fst = WHITE; snd = GREEN; trd = RED };
          right = { fst = WHITE; snd = YELLOW; trd = RED };
          back = { fst = ORANGE; snd = BLUE; trd = RED };
          left = { fst = BLUE; snd = WHITE; trd = ORANGE };
        };
      middle_layer =
        {
          front = { fst = YELLOW; snd = GREEN; trd = BLUE };
          right = { fst = ORANGE; snd = RED; trd = GREEN };
          back = { fst = ORANGE; snd = BLUE; trd = RED };
          left = { fst = YELLOW; snd = ORANGE; trd = BLUE };
        };
      bottom_layer =
        {
          front = { fst = YELLOW; snd = BLUE; trd = GREEN };
          right = { fst = ORANGE; snd = ORANGE; trd = YELLOW };
          back = { fst = BLUE; snd = WHITE; trd = GREEN };
          left = { fst = RED; snd = WHITE; trd = GREEN };
        };
      bottom_face =
        {
          fst = { fst = ORANGE; snd = RED; trd = WHITE };
          snd = { fst = RED; snd = YELLOW; trd = YELLOW };
          trd = { fst = YELLOW; snd = ORANGE; trd = ORANGE };
        };
    }
  in
  let solution = solve_cross cube in
  Alcotest.(check cube_cross_solved_testable)
    "cross solved" cube_with_cross_solved solution.cube

let () =
  let open Alcotest in
  run "Solve"
    [
      ( "cross",
        [
          test_case "#1" `Quick solve_cross_test_1;
          test_case "#2" `Quick solve_cross_test_2;
        ] );
    ]
